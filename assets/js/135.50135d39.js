(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{697:function(t,a,s){"use strict";s.r(a);var e=s(21),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_124-二叉树中的最大路径和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_124-二叉树中的最大路径和"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("124. 二叉树中的最大路径和"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0124.Binary%20Tree%20Maximum%20Path%20Sum/README_EN.md",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("English Version"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),s("p",[s("strong",[t._v("路径")]),t._v(" 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 "),s("strong",[t._v("至多出现一次")]),t._v(" 。该路径"),s("strong",[t._v(" 至少包含一个 ")]),t._v("节点，且不一定经过根节点。")]),t._v(" "),s("p",[s("strong",[t._v("路径和")]),t._v(" 是路径中各节点值的总和。")]),t._v(" "),s("p",[t._v("给你一个二叉树的根节点 "),s("code",[t._v("root")]),t._v(" ，返回其 "),s("strong",[t._v("最大路径和")]),t._v(" 。")]),t._v(" "),s("p"),t._v(" "),s("p",[s("strong",[t._v("示例 1：")])]),t._v(" "),s("img",{staticStyle:{width:"322px",height:"182px"},attrs:{alt:"",src:"https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0124.Binary%20Tree%20Maximum%20Path%20Sum/images/exx1.jpg"}}),t._v(" "),s("pre",[s("strong",[t._v("输入：")]),t._v("root = [1,2,3]\n"),s("strong",[t._v("输出：")]),t._v("6\n"),s("strong",[t._v("解释：")]),t._v("最优路径是 2 -> 1 -> 3 ，路径和为 2 + 1 + 3 = 6")]),t._v(" "),s("p",[s("strong",[t._v("示例 2：")])]),t._v(" "),s("img",{attrs:{alt:"",src:"https://cdn.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0124.Binary%20Tree%20Maximum%20Path%20Sum/images/exx2.jpg"}}),t._v(" "),s("pre",[s("strong",[t._v("输入：")]),t._v("root = [-10,9,20,null,null,15,7]\n"),s("strong",[t._v("输出：")]),t._v("42\n"),s("strong",[t._v("解释：")]),t._v("最优路径是 15 -> 20 -> 7 ，路径和为 15 + 20 + 7 = 42\n")]),t._v(" "),s("p"),t._v(" "),s("p",[s("strong",[t._v("提示：")])]),t._v(" "),s("ul",[s("li",[t._v("树中节点数目范围是 "),s("code",[t._v("[1, 3 * 10"),s("sup",[t._v("4")]),t._v("]")])]),t._v(" "),s("li",[s("code",[t._v("-1000 <= Node.val <= 1000")])])]),t._v(" "),s("h2",{attrs:{id:"解法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解法"}},[t._v("#")]),t._v(" 解法")]),t._v(" "),s("h3",{attrs:{id:"python3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python3"}},[t._v("#")]),t._v(" "),s("strong",[t._v("Python3")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"java"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" "),s("strong",[t._v("Java")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" "),s("strong",[t._v("...")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);